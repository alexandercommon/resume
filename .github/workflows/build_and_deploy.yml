# Simple workflow for deploying static content to GitHub Pages
name: Build and deploy to static pages

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      data:
        description: 'Data file'
        required: true
        type: string
        default: 'data.json'
      output:
        description: 'Output file'
        required: true
        type: string
        default: 'index.html'
      template:
        description: 'Template file'
        required: true
        type: string
        default: 'template.html'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install liquidpy

      - name: Build file
        run: |
          printf -v CODE 'import json\nimport os\nfrom liquid import Liquid\n\n# Check if the JSON data file exists\nif not os.path.isfile("./${{ inputs.data }}"):\n\tprint("Error. data file not found")\n\texit()\n\n# Check if the Liquid template file exists\nif not os.path.isfile("./${{ inputs.template }}"):\n\tprint("Error. template file not found")\n\texit()\n\n# Load the JSON data from a file\nwith open("./${{ inputs.data }}") as f:\n\tdata = json.load(f)\n\n# Load the Liquid template from a file\ntemplate = Liquid("./${{ inputs.template }}")\n\n# Render the template with the JSON data\nnew_site = template.render(data)\n\n# Write the rendered output to an HTML file\nwith open("./${{ inputs.output }}", "w") as f:\n\tf.write(new_site)'
          python -c "$CODE"

      - uses: actions/upload-artifact@v2
        with:
          name: new-index
          path: ./index.html

  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3

      - uses: actions/download-artifact@v2
        with:
          name: new-index

      - name: Print dir info
        run: ls -lah && pwd

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './index.html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
              

# Simple workflow for deploying static content to GitHub Pages
name: Build and deploy to static pages

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      data:
        description: 'Data file'
        required: true
        type: string
        default: 'data.json'
      output:
        description: 'Output file'
        required: true
        type: string
        default: 'index.html'
      template:
        description: 'Template file'
        required: true
        type: string
        default: 'template.html'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install liquidpy
      - name: Build file
        run: |
          printf -v CODE 'import json
          import os
          from liquid import Liquid

          # Check if the JSON data file exists
          if not os.path.isfile('${{ inputs.json }}'):
            print('Error: data file not found')
            exit()

          # Check if the Liquid template file exists
          if not os.path.isfile('${{ inputs.template }}'):
            print('Error: template file not found')
            exit()

          # Load the JSON data from a file
          with open('data.json') as f:
            data = json.load(f)

          # Load the Liquid template from a file
          template = Liquid('${{ inputs.template }}')

          # Render the template with the JSON data
          new_site = template.render(data)

          # Write the rendered output to an HTML file
          with open('${{ inputs.output }}', 'w') as f:
            f.write(new_site)'
            python -c $CODE
